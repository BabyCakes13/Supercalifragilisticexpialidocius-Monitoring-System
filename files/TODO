- finish testing main, collect_metrics and packets_send
- test create_id: check the re and the actual id to see if the generated id is ok.
@patch('psutil.disk_usage')
    @patch('psutil.cpu_percent')
    @patch('psutil.virtual_memory')
    @patch('psutil.cpu_stats')
    def test_call_metric_functions(self, cpu_stats, virtual_memory, cpu_percent, disk_usage):

        self.mock_manager.attach_mock(disk_usage, 'disk_usage')
        self.mock_manager.attach_mock(cpu_percent, 'cpu_percent')
        self.mock_manager.attach_mock(virtual_memory, 'virtual_memory')
        self.mock_manager.attach_mock(cpu_stats, 'cpu_stats')

        expected_values1 = [call.disk_usage(os.path.abspath(os.sep))]
        expected_values2 = [call.cpu_percent(interval=1, percpu=True)]
        expected_values3 = [call.virtual_memory()]
        expected_values4 = [call.cpu_stats()]

        expected_values = [expected_values1,
                           expected_values2,
                           expected_values3,
                           expected_values4]

        print(expected_values[1])
        for index in range(len(expected_values)+1):
            print(index)
            self.metric_manager.call_metric_functions(index)
            self.assertEqual(self.mock_manager.mock_calls, expected_values[1])